#include"dir.h"

void randtet(int x,int y,int X[4],int Y[4],int &color)
{
	int rand=getRand(7);
	if(rand==0)
	{
		color=124;
		X[0]=x;
		Y[0]=y;
		X[1]=x+1;
		Y[1]=y;
		X[2]=x+2;
		Y[2]=y;
		X[3]=x+3;
		Y[3]=y;
	}
	else if(rand==1)
	{
		color=121;
		X[0]=x;
		Y[0]=y;
		X[1]=x;
		Y[1]=y-1;
		X[2]=x;
		Y[2]=y+1;
		X[3]=x+1;
		Y[3]=y+1;
	}
	else if(rand==2)
	{
		color=209;
		X[0]=x;
		Y[0]=y;
		X[1]=x+1;
		Y[1]=y+1;
		X[2]=x;
		Y[2]=y+1;
		X[3]=x+1;
		Y[3]=y;
	}
	else if(rand==3)
	{
		color=247;
		X[0]=x;
		Y[0]=y;
		X[1]=x;
		Y[1]=y-1;
		X[2]=x;
		Y[2]=y+1;
		X[3]=x+1;
		Y[3]=y-1;
	}
	else if(rand==4)
	{
		color=212;
		X[0]=x;
		Y[0]=y;
		X[1]=x;
		Y[1]=y-1;
		X[2]=x+1;
		Y[2]=y;
		X[3]=x+1;
		Y[3]=y+1;
	}
	else if(rand==5)
	{
		color=164;
		X[0]=x;
		Y[0]=y;
		X[1]=x;
		Y[1]=y+1;
		X[2]=x+1;
		Y[2]=y;
		X[3]=x+1;
		Y[3]=y-1;
	}
	else if(rand==6)
	{
		color=175;
		X[0]=x;
		Y[0]=y;
		X[1]=x;
		Y[1]=y-1;
		X[2]=x+1;
		Y[2]=y;
		X[3]=x;
		Y[3]=y+1;
	}
}

char *piecetochar(int X[4],int Y[4],int color)
{
	char *piece;
	sprintf(piece,"%d:%d:%d:%d:%d:%d:%d:%d:%d",color,X[0],Y[0],X[1],Y[1],X[2],Y[2],X[3],Y[3]);
	return piece;
}

void chartopiece(char *piece,int X[4],int Y[4],int &color)
{
	sscanf(piece,"%d:%d:%d:%d:%d:%d:%d:%d:%d",&color,&X[0],&Y[0],&X[1],&Y[1],&X[2],&Y[2],&X[3],&Y[3]);
}

void makePiece(int mapid,int X[4],int Y[4],int color)
{
	cMap *map=mapStruct(mapid);
	for(int i=0;i<4;i++)
	{
		map->map[Y[i]][X[i]].tile[1]=color;
	}
}

bool canfall(int mapid,int X[4],int Y[4])
{
	cMap *map=mapStruct(mapid);
	for(int i=0;i<4;i++)
	{
		if(map->map[Y[i]][X[i]+1].tile[1]!=0)
		{
			return false;
		}
	}
	return true;
}

void rotate(int mapid,int X[4],int Y[4],int pivot)
{
	cMap *map=mapStruct(mapid);
	int x[4];
	int y[4];
	int i;
	for(i=0;i<4;i++)
	{
		x[i]=X[i];
		y[i]=Y[i];
	}
	for(i=0;i<4;i++)
	{
		y[i]=Y[pivot]+(-(X[i]-X[pivot]));
		x[i]=X[pivot]+(-(Y[i]-Y[pivot]));
	}
	bool canrotate=true;
	for(i=0;i<4;i++)
	{
		if(map->map[y[i]][x[i]].tile[1]!=0)
		{
			canrotate=false;
		}
	}
	if(canrotate)
	{
		for(i=0;i<4;i++)
		{
			X[i]=x[i];
			Y[i]=y[i];
		}
	}
}

bool canmove(int mapid,int X[4],int Y[4],int dir)
{
	cMap *map=mapStruct(mapid);
	for(int i=0;i<4;i++)
	{
		if(!inBounds(X[i],Y[i]+dir) || map->map[Y[i]+dir][X[i]].tile[1]!=0)
		{
			return false;
		}
	}
	return true;
}

void fall(int X[4],int Y[4])
{
	for(int i=0;i<4;i++)
	{
		X[i]++;
	}
}

void move(int X[4],int Y[4],int dir)
{
	for(int i=0;i<4;i++)
	{
		Y[i]+=dir;
	}
}

void main()
{
	int id=getPlayer();
	cPlayer *player=playerStruct(id);
	int mapid=player->map;
	cMap *map=mapStruct(mapid);
	char global[64];
	char *globalvalue;
	int X[4];
	int Y[4];
	int color;
	sprintf(global,"%dtetris",mapid);
	if(getID(mapid,18,8)!=-1)
	{
		if(!isGlobal(global))
		{
			randtet(0,7,X,Y,color);
			makePiece(mapid,X,Y,color);
			setGlobalStr(global,piecetochar(X,Y,color));
		}
		else
		{
			chartopiece(globalStr(global),X,Y,color);
			bool downfall=false;
			bool piecedone=false;
			int limiter=100;
			int i;
			for(i=0;i<4;i++)
			{
				map->map[Y[i]][X[i]].tile[1]=0;
			}
			
			if(player->dir!=DIR_RIGHT)
			{
				if(player->dir==DIR_UP || player->dir==DIR_DOWN)
				{
					int dir;//=globalInt(strCat(global,"dir"));
					if(player->dir==DIR_UP)
						dir=-1;
					else
						dir=1;
					if(canmove(mapid,X,Y,dir))
						move(X,Y,dir);
					//freeGlobal(strCat(global,"dir"));
				}
				/*
				if(isGlobal(strCat(global,"down")))
				{
					downfall=true;
					freeGlobal(strCat(global,"down"));
				}
				*/
				if(player->dir==DIR_LEFT)
				{
					if(color!=247)
						rotate(mapid,X,Y,0);
				}
			}
			
			do
			{
				if(canfall(mapid,X,Y))
				{
					fall(X,Y);
				}
				else
				{
					downfall=false;
					piecedone=true;
				}
				limiter--;
			}
			while(downfall && limiter>0);
			
			makePiece(mapid,X,Y,color);
			
			if(!piecedone)
			{
				setGlobalStr(global,piecetochar(X,Y,color));
			}
			else
			{
				freeGlobal(global);
			}
		}
		runScript(myScript(),100);
	}
	else if(isGlobal(global))
	{
		chartopiece(globalStr(global),X,Y,color);
		for(int i=0;i<4;i++)
		{
			map->map[Y[i]][X[i]].tile[1]=0;
		}
		freeGlobal(global);
	}
	mapSave(mapid);
	sendMapUpdate(mapid);
}