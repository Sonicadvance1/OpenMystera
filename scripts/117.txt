/*
	Merchant chat script
	Written by Steve Northamer - updated by James
	SteveNorthamer@yahoo.com
	December 6, 2003

	Edited by Valek 7/29/07, for Mass Trading
*/

#include <string.h>

const int MAX_STRING_SIZE = 256;

void main()
{
	int MerchantID;
	int MapID;
	int PlayerID;
	char* pRequest;
	int i;
	int InvSize;
	int SellItemID;
	int SellQuantity;
	int BuyItemID;
	int BuyQuantity;
	char pTemp[MAX_STRING_SIZE];
	int TradeID;
	int TradeQty=-1;
	int Count;
	int itemCount=0;

	MerchantID = getPlayer();
	
	PlayerID = getChatPlayer();
	pRequest = stringLower(getChat());
	InvSize = inventoryLen();
	cItem *pItem;
	cItem *pPrice;
	cPlayer *pMerchant = playerStruct(MerchantID);
	MapID = pMerchant->map;
	cPlayer *pPlayer = playerStruct(PlayerID);
                                                                                                                                                            
	if (strncmp(stringLower(pRequest), "list", 4) == 0)	
	{
		sendMapChatf(MapID, "%s:Hello %s! Here is what I have to trade today...", pMerchant->name, pPlayer->name);

		for (i = 0; i < InvSize; i += 2)
		{
			SellItemID = inventoryItem(MerchantID, i);
			if(SellItemID == -1)
				continue;
			pItem = itemStruct(SellItemID);
			SellQuantity = pItem->qty;

			BuyItemID = inventoryItem(MerchantID, i+1);
			if(BuyItemID == -1)
				continue;
			pPrice = itemStruct(BuyItemID);
			BuyQuantity = pPrice->qty;

			if (SellQuantity == 0)
				continue;

			TradeID = (i / 2) + 1;
			strcpy(pTemp, pItem->name);
		
			if(SellQuantity < 0)
			{
				if (BuyQuantity < 0)
					sendChatf(PlayerID, "^y%d) %s^y for %s", TradeID, pTemp, pPrice->name);
				else
					sendChatf(PlayerID, "^y%d) %s^y for %s[%d]", TradeID, pTemp, pPrice->name, BuyQuantity);
			}
			else
			{
				if (BuyQuantity < 0)
					sendChatf(PlayerID, "^y%d) %s[%d]^y for %s", TradeID, pTemp, SellQuantity, pPrice->name);
				else
					sendChatf(PlayerID, "^y%d) %s[%d]^y for %s[%d]", TradeID, pTemp, SellQuantity, pPrice->name, BuyQuantity);
			}
		}
	}

	else if (sscanf(pRequest, "trade %d %d", &TradeID, &TradeQty) >=1)
	{

		i = (TradeID - 1) * 2;

		// Check TradeID
		if (i < 0 || i >= InvSize || inventoryItem(MerchantID,i) < 1)
		{
			sendMapChatf(MapID, "%s:%s, I don't understand what you're asking for...", getName(MerchantID), getName(PlayerID));
			return;
		}

		SellItemID = inventoryItem(MerchantID, i);
		BuyItemID = inventoryItem(MerchantID, i+1);
		
		if(SellItemID == -1 || BuyItemID == -1)
			return;
		pItem = itemStruct(SellItemID);
		pPrice = itemStruct(BuyItemID);
		BuyQuantity = pPrice->qty;
		SellQuantity = pItem->qty;
		
		if(TradeQty>-1)
		{
			if(BuyQuantity>-1)
				BuyQuantity*=TradeQty;
			if(SellQuantity>-1)
				SellQuantity*=TradeQty;
		}
		else
		{
			TradeQty=1;
		}

		// Check TradeID
		if (SellQuantity == 0)
		{
			sendMapChatf(MapID, "%s:%s, I don't understand what you're asking for...", getName(MerchantID), getName(PlayerID));
			return;
		}

		// Find item that merchant is buying from player in player's inventory
		for (i = 0; i < InvSize; i++)
		{
			if (itemAt(PlayerID, i) == pPrice->item_template)
			{
				if(BuyQuantity>-1)
				{
					cItem *item=itemStruct(pPlayer->inventory[i]);
					itemCount=item->qty;
					break;
				}
				else
				{
					itemCount++;
				}
			}				
					
		}

		// Player doesn't have the item to trade
		if (itemCount==0)
		{
			sendMapChatf(MapID, "%s:%s, you don't have %s", getName(MerchantID), getName(PlayerID), pPrice->name);
			return;
		}
		

		// Player doesn't have enough of the item to trade
		if ((BuyQuantity > itemCount && BuyQuantity>-1)||(TradeQty>itemCount && BuyQuantity==-1))
		{
			sendMapChatf(MapID, "%s:%s, you don't have enough %s", getName(MerchantID), getName(PlayerID), pPrice->name);
			return;
		}

		// Make sure player has room in their inventory
		if(SellQuantity>-1)
		{
			if (!giveItem(PlayerID, pItem->item_template, SellQuantity))
			{
				sendMapChatf(MapID, "%s:%s, you can't carry %s", getName(MerchantID), getName(PlayerID), pItem->name);
				return;
			}
		}
		else
		{
			int openSlots=0;
			for(int it=0;it<inventoryLen();it++)
			{
				if(pPlayer->inventory[it]==-1)
				{
					openSlots++;
				}
			}
			if(openSlots>TradeQty)
			{
				for(int t=0;t<TradeQty;t++)
				{
					giveItem(PlayerID,pItem->item_template,-1);
				}
			}
			else
			{
				sendMapChatf(MapID, "%s:%s, you need more open inventory slots.", getName(MerchantID), getName(PlayerID), pItem->name);
				return;
			}
		}

		if(BuyQuantity<0)
		{
			for(int i=0;i<inventoryLen(),TradeQty>0;i++)
			{
				if(pPlayer->inventory[i]>-1)
				{
					int invItem = pPlayer->inventory[i];
					cItem *costed = itemStruct(invItem);
					if(costed->item_template==pPrice->item_template)
					{
						sendInventoryQty(PlayerID,i,0);
						costed->qty=0;
						itemDelete(invItem);
						if(pPlayer->eLeft==i)
							pPlayer->eLeft=-1;
						if(pPlayer->eRight==i)
							pPlayer->eRight=-1;
						if(pPlayer->eHead==i)
							pPlayer->eHead=-1;
						if(pPlayer->eBody==i)
							pPlayer->eBody=-1;
						if(pPlayer->eSpecial==i)
							pPlayer->eSpecial=-1;
						pPlayer->inventory[i]=-1;
						TradeQty--;
					}
				}
			}
			playerSave(PlayerID);
			sendEquip(PlayerID);
		}
		else
		{
			int invItem = pPlayer->inventory[i];
			cItem *costed = itemStruct(invItem);
			costed->qty -= BuyQuantity;
			sendInventoryQty(PlayerID,i,costed->qty);
			if(costed->qty==0)
			{
				itemDelete(invItem);
				if(pPlayer->eLeft==i)
					pPlayer->eLeft=-1;
				if(pPlayer->eRight==i)
					pPlayer->eRight=-1;
				if(pPlayer->eHead==i)
					pPlayer->eHead=-1;
				if(pPlayer->eBody==i)
					pPlayer->eBody=-1;
				if(pPlayer->eSpecial==i)
					pPlayer->eSpecial=-1;
				pPlayer->inventory[i]=-1;
				playerSave(PlayerID);
				sendEquip(PlayerID);
			}
			else
				itemSave(invItem);
		}
		
		sendMapChatf(MapID, "%s:Thank you %s! Here is your %s", getName(MerchantID), getName(PlayerID), pItem->name);
	}
}

