// Bread Baking

int main()
{

	int PlayerID;
	int SlotID;
	int ItemID;
	cPlayer* pPlayer;
	cItem* pItem;
	PlayerID = getPlayer();
	pPlayer = playerStruct(PlayerID);

	// Search player's inventory for dough
	for (SlotID = 0; SlotID < inventoryLen(); SlotID++)
		{
		ItemID = pPlayer->inventory[SlotID];
		pItem = itemStruct(ItemID);
		if (pItem->item_template == 437)
			break;
		}

	// If no dough found
	if (SlotID == inventoryLen())
		{
		sendChat("^RNo dough to cook!", PlayerID);
		return 0;
		}

	// Turn dough into bread
	int odds=getRand(3);
	int PlayerMapID=getMap(PlayerID);
	if(odds==2)
	{
		sendMapChatf(PlayerMapID, "%s:^ROh no! The bread is burnt and icky!", getName(PlayerID));
		*pItem = *itemTemplateStruct(444);
		pItem->owner = PlayerID;
		pItem->slot = SlotID;
		pItem->qty = -1;
		itemSave(ItemID);
		sendInventoryAdd(PlayerID, pItem->graphic, pItem->name, pItem->slot, pItem->qty);
	}
	else
	{
		sendMapChatf(PlayerMapID, "%s:^G*pulls out some nice warm bread*", getName(PlayerID));
		*pItem = *itemTemplateStruct(438);
		pItem->owner = PlayerID;
		pItem->slot = SlotID;
		pItem->qty = -1;
		itemSave(ItemID);
		sendInventoryAdd(PlayerID, pItem->graphic, pItem->name, pItem->slot, pItem->qty);
	}
		

	/*int id=getPlayer();
	int slot=itemSlot(id,434);
	if(slot<0)
	{
		sendChat("^RNo dough to cook!",id);
	}
	else
	{
		takeItem(id,slot);
		giveItem(id,438,1);
	}*/
}