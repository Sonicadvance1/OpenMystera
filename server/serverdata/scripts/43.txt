
#include "dir.h"
#include "time.h"
#include "mapping.h"

struct prism
{
	int tile;
	int effect[2];
};

#define RED    212
#define YELLOW 209
#define BLUE   247
#define ORANGE 121
#define PURPLE 311
#define GREEN  124

prism colors[] =
{
	{RED,{0,-1}},
	{YELLOW,{2,-1}},
	{BLUE,{12,-1}},
	{ORANGE,{0,2}},
	{PURPLE,{0,12}},
	{GREEN,{2,12}}
};

pos outpos[] = 
{
	{13,4,1402},
	{11,12,1402}
};

pos inpos = {9,9,1402};

pos wallpos[] = 
{
	{6,9,1402},
	{13,9,1402}
};


const int num_outpos  = sizeof(outpos)/sizeof(pos);
const int num_wallpos = sizeof(wallpos)/sizeof(pos);
const int num_colors  = sizeof(colors)/sizeof(prism);
const int num_primary = 3;

bool hasColor(int color[num_colors], int which_color)
{
	int reqs[2];
	bool has = false;
	switch(which_color)
	{
		case ORANGE:
			reqs[0] = RED;
			reqs[1] = YELLOW;
			break;
		case GREEN:
			reqs[0] = BLUE;
			reqs[1] = YELLOW;
			break;
		case PURPLE:
			reqs[0] = RED;
			reqs[1] = BLUE;
			break;
	}
	for(int r = 0; r < 2;r++)
	{
		for(int c = 0; c < num_colors; c++)
		{
			if(color[c] == reqs[r])
			{
				if(r == 1 && has == true)
				{
					return true;
				}
				else if(r == 0)
				{
					has = true;
					break;
				}
			}
		}
	}
	return false;
}

void addColor(int color[num_colors], int which_color)
{
	for(int i = 0;i < num_colors; i++)
	{
		if(color[i] == -1)
		{
			color[i] = which_color;
			break;
		}
	}
}

void fireBeam(int startmap,int startx, int starty, int dir)
{
	int color[num_colors];
	int temp_color;
	cMap *map = mapStruct(startmap);
	bool effect_made;
	for(int i =0; i < num_colors;i++)
	{
		color[i] = -1;
	}
	while(inBounds(startx,starty))
	{
		temp_color = map->map[starty][startx].tile[1];
		
		if(temp_color == RED || temp_color == YELLOW || temp_color == BLUE)
		{
			addColor(color, temp_color);
		}
		else if(temp_color == ORANGE || temp_color == PURPLE || temp_color == GREEN)
		{
			if(hasColor(color,temp_color))
			{
				makeEffect(startmap,startx,starty,17);
				map->map[starty][startx].tile[1] = 0;
				map->map[starty][startx].type = TILE_TYPE_NONE;
				savemap(startmap);
			}
			return;
		}
		effect_made = false;
		for(int c = 0; c < num_colors;c++)
		{
			for(int i = 0; i < num_colors; i++)
			{
				if(color[i] == colors[c].tile)
				{
					for(int e = 0; e < 2; e++)
					{
						if(colors[c].effect[e] != -1)
						{
							makeEffect(startmap,startx,starty,colors[c].effect[e]);
							effect_made = true;
						}
					}
				}
			}
		}
		if(!effect_made)
		{
			makeEffect(startmap,startx,starty,14);
		}
		dirapply(startx,starty,dir);
	}
}
void reset()
{
	cMap *map = mapStruct(1402);
	int temp_color;
	int color[2];
	int opposite;
	int rand_pos;
	int rand_color;
	int x,y;
	switch(getRand(3))
	{
		case 0:
			color[0] = ORANGE;
			switch(getRand(2))
			{
				case 0:
					color[1] = GREEN;
					break;
				case 1:
					color[1] = PURPLE;
					break;
			}
			break;
		case 1:
			color[0] = GREEN;
			switch(getRand(2))
			{
				case 0:
					color[1] = PURPLE;
					break;
				case 1:
					color[1] = ORANGE;
					break;
			}
			break;
		case 2:
			color[0] = PURPLE;
			switch(getRand(2))
			{
				case 0:
					color[1] = GREEN;
					break;
				case 1:
					color[1] = ORANGE;
					break;
			}
			break;
	}
	
	map->map[wallpos[0].y][wallpos[0].x].tile[1] = color[0];
	map->map[wallpos[1].y][wallpos[1].x].tile[1] = color[1];
	map->map[wallpos[0].y][wallpos[0].x].type = TILE_TYPE_WALL;
	map->map[wallpos[1].y][wallpos[1].x].type = TILE_TYPE_WALL;
	
	for(x = 0; x < 20; x++)
	{
		for(y = 0; y < 15; y++)
		{
			temp_color = map->map[y][x].tile[1];
			if(temp_color == RED || temp_color == YELLOW || temp_color == BLUE)
			{
				map->map[y][x].tile[1] = 0;
				map->map[y][x].type    = TILE_TYPE_NONE;
			}
		}
	}
	
	switch(color[0])
	{
		case ORANGE:
			opposite = BLUE;
			break;
		case GREEN:
			opposite = RED;
			break;
		default:
			opposite = YELLOW;
			break;
	}
	
	map->map[inpos.y][inpos.x].tile[1]  = opposite;
	map->map[inpos.y][inpos.x].type     = TILE_TYPE_SWITCH;
	map->map[inpos.y][inpos.x].warp.map = 55;
	
	rand_pos = getRand(num_outpos);
	do
	{
		rand_color = getRand(num_primary);
	}
	while(colors[rand_color].tile == opposite);
	map->map[outpos[rand_pos].y][outpos[rand_pos].x].tile[1] = colors[rand_color].tile;
	map->map[outpos[rand_pos].y][outpos[rand_pos].x].type = TILE_TYPE_SWITCH;
	map->map[outpos[rand_pos].y][outpos[rand_pos].x].warp.map = 55;
	
	for(int c = 0; c < num_primary; c++)
	{
		if(colors[c].tile != opposite && c != rand_color)
		{
			for(int p = 0; p < num_outpos; p++)
			{
				if(p != rand_pos)
				{
					map->map[outpos[p].y][outpos[p].x].tile[1] = colors[c].tile;
					map->map[outpos[p].y][outpos[p].x].type = TILE_TYPE_SWITCH;
					map->map[outpos[p].y][outpos[p].x].warp.map = 55;
				}
			}
		}
	}
	
	savemap(1402);
}

void main()
{
	int id = getPlayer();
	cPlayer *player = playerStruct(id);
	srand(time(0));
	
	int x= player->x;
	int y= player->y;
	
	dirapply(x,y,player->dir);
	
	if(x == 6 && y == 5)
	{
		fireBeam(1402,6,y + 1,DIR_DOWN);
	}
	else if(x == 11 && y == 1)
	{
		reset();
		sendChatf(id,"YOOOO");
	}
	else
	{
		fireBeam(1402,13,y + 1,DIR_DOWN);
	}
}