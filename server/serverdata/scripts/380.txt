/*
	Submap merging script
	Written by Steve Northamer
	SteveNorthamer@yahoo.com
	January 29, 2004
*/

typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef unsigned int UINT32;
typedef char INT8;
typedef short INT16;
typedef int INT32;

const int NUM_TILE_LAYERS = 4;

struct TILE
{
	UINT8 Type;
	UINT16 Layer[NUM_TILE_LAYERS];
	union
		{
		INT16 WarpMapID;
		INT16 ScriptID;
		};
	UINT8 WarpX;
	UINT8 WarpY;
};

struct SUBMAP
{
	UINT8 Width;
	UINT8 Height;
	UINT8 OriginX;
	UINT8 OriginY;
	TILE pTiles[MAP_WIDTH * MAP_HEIGHT];
};

SUBMAP HOUSE_FANCY_MEDIUM = {
	3, 6, 1, 6,
		{
		TILE_TYPE_NONE, { 0, 0, 0, 0 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 0, 0, 10 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 0, 0, 0 }, 0, 0, 0,

		TILE_TYPE_NONE, { 0, 0, 0, 54 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 0, 0, 26 }, 0, 0, 0 ,
		TILE_TYPE_NONE, { 0, 0, 0, 53 }, 0, 0, 0,

		TILE_TYPE_NONE, { 0, 0, 0, 55 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 0, 0, 42 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 0, 0, 81 }, 0, 0, 0,

		TILE_TYPE_WALL, { 0, 0, 0, 71 }, 0, 0, 0,
		TILE_TYPE_WALL, { 0, 0, 0, 59 }, 0, 0, 0,
		TILE_TYPE_WALL, { 0, 0, 0, 97 }, 0, 0, 0,

		TILE_TYPE_WALL, { 0, 70, 0, 0 }, 0, 0, 0,
		TILE_TYPE_WALL, { 0, 75, 0, 0 }, 0, 0, 0,
		TILE_TYPE_WALL, { 0, 113, 0, 0 }, 0, 0, 0,

		TILE_TYPE_WALL, { 0, 84, 0, 0 }, 0, 0, 0,
		TILE_TYPE_WARP, { 0, 91, 0, 0 }, 825, 10, 12,
		TILE_TYPE_WALL, { 0, 8, 0, 358 }, 0, 0, 0
		}
	};

SUBMAP TABLE_ROUND = {
	3, 3, 1, 2,
		{
		TILE_TYPE_NONE, { 0, 0, 0, 0 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 269, 0, 0 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 0, 0, 0 }, 0, 0, 0,

		TILE_TYPE_NONE, { 0, 285, 0, 0 }, 0, 0, 0,
		TILE_TYPE_WALL, { 0, 268, 0, 0 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 286, 0, 0 }, 0, 0, 0,

		TILE_TYPE_NONE, { 0, 0, 0, 0 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 0, 0, 270 }, 0, 0, 0,
		TILE_TYPE_NONE, { 0, 0, 0, 0 }, 0, 0, 0
		}
	};

void MergeSubmap(SUBMAP* xpSubmap, int xMapID, int xMapX, int xMapY)
{
	int x, y;
	int Layer;
	TILE* pTile;

	// Offset specified coordinates by submap origin coordinates
	xMapX -= xpSubmap->OriginX;
	xMapY -= xpSubmap->OriginY;

	// Merge submap into specified map
	pTile = xpSubmap->pTiles;
	for (y = 0; y < xpSubmap->Height; y++)
		{
		for (x = 0; x < xpSubmap->Width; x++, pTile++)
			{
			if (!inBounds(xMapX + x, xMapY + y))
				continue;

			if (pTile->Type != TILE_TYPE_NONE)
				setTileType(xMapID, xMapX + x, xMapY + y, pTile->Type);

			for (Layer = 0; Layer < NUM_TILE_LAYERS; Layer++)
				{
				if (pTile->Layer[Layer] != 0)
					setTile(xMapID, xMapX + x, xMapY + y, Layer, pTile->Layer[Layer]);
				}

			switch (pTile->Type)
				{
				case TILE_TYPE_WARP:
					setTileWarp(xMapID, xMapX + x, xMapY + y, pTile->WarpMapID, pTile->WarpX, pTile->WarpY);
					break;
				case TILE_TYPE_SCRIPT:
				case TILE_TYPE_SWITCH:
					setTileScript(xMapID, xMapX + x, xMapY + y, pTile->ScriptID);
					break;
				}
			}
		}
}

void SubtractSubmap(SUBMAP* xpSubmap, int xMapID, int xMapX, int xMapY)
{
	int x, y;
	int Layer;
	TILE* pTile;

	// Offset specified coordinates by submap origin coordinates
	xMapX -= xpSubmap->OriginX;
	xMapY -= xpSubmap->OriginY;

	// Subtract submap from specified map	
	pTile = xpSubmap->pTiles;
	for (y = 0; y < xpSubmap->Height; y++)
		{
		for (x = 0; x < xpSubmap->Width; x++, pTile++)
			{
			if (!inBounds(xMapX + x, xMapY + y))
				continue;

			if (pTile->Type != TILE_TYPE_NONE)
				setTileType(xMapID, xMapX + x, xMapY + y, TILE_TYPE_NONE);

			for (Layer = 0; Layer < NUM_TILE_LAYERS; Layer++)
				{
				if (pTile->Layer[Layer] != 0)
					setTile(xMapID, xMapX + x, xMapY + y, Layer, 0);
				}
			}
		}
}
