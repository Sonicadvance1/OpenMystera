
/*
	Consolidated Door Lock Script
	Written by Steve & Sunnmann
	January 1, 2004
*/

/*
	Description: This script consolidates all locked doors by using
	player's coordinates and name to determine whether they can open
	the door they are facing
*/

/*
const int DIR_DOWN = 0;
const int DIR_UP = 1;
const int DIR_LEFT = 2;
const int DIR_RIGHT = 3;

const int TILE_TYPE_NONE = 1;
const int TILE_TYPE_WALL = 2;
const int TILE_TYPE_WARP = 3;
const int TILE_TYPE_NPC = 4;
const int TILE_TYPE_SCRIPT = 5;
const int TILE_TYPE_SWITCH = 6;
const int TILE_TYPE_KEEP = 7;


const int LAYER_FLOOR = 0;
const int LAYER_OBJECT = 1;
const int LAYER_FLIP = 2;
const int LAYER_CEILING = 3;

*/
const int TILE_NONE = 0;
const int TILE_BUSH = 57;
const int TILE_STONE_DOOR = 61;
const int TILE_BLACK = 64;
const int TILE_CAVE = 74;
const int TILE_FANCY_DOOR = 91;
const int TILE_STONE_ARCH = 133;
const int TILE_FENCE_HORIZ = 257;
const int TILE_FENCE_VERT = 272;
const int TILE_BOULDER = 259;
const int TILE_FRENCH_DOOR = 294;
const int TILE_WOOD_DOOR = 531;
const int TILE_WOOD_ARCH = 532;
const int TILE_GATE_OPEN = 534;
const int TILE_GATE_CLOSED = 533;

const int DOOR_TYPE_DELAYED = 0;	// Door becomes passable and runScript closes door
const int DOOR_TYPE_WARP_DELAYED = 1;	// Door becomes warp and runScript closes door
const int DOOR_TYPE_AUTO = 2;		// Door becomes script and script closes door
const int DOOR_TYPE_WARP_AUTO = 3;	// Door becomes script and script warps player and closes door
const int DOOR_TYPE_SECURE = 4;		// Door doesn't change and player is warped to door coordinates
const int DOOR_TYPE_WARP_SECURE = 5;	// Door doesn't change and player is warped to warp coordinates


struct DOOR
{
	int MapID;
	int X;
	int Y;
	char* pPlayerName;
	int DoorType;
	int Layer;
	int TileClosed;
	int TileOpen;
	int Delay;
	int WarpMapID;
	int WarpX;
	int WarpY;
};

// ADD NEW DOORS TO THE LIST BELOW!
DOOR gDoors[] = {
	
	{ 1094, 15, 1, "Guster", DOOR_TYPE_WARP_SECURE, 0, 0, 0, 0, 1098, 9, 7, }, // Mini RPG Stash (Trusted)
	{ 1094, 15, 1, "Otendoten", DOOR_TYPE_WARP_SECURE, 0, 0, 0, 0, 1098, 9, 7, }, // Mini RPG Stash (Trusted)
	
	};


const int NUM_DOORS = sizeof(gDoors) / sizeof(DOOR);

void main()
{
	int PlayerID;
	string PlayerName;
	int PlayerMapID;
	int PlayerDir;
	int PlayerX;
	int PlayerY;
	int DoorMapID;
	int DoorX;
	int DoorY;
	int DoorIndex;
	DOOR* pDoor;
	string GlobalVarName;
	bool IsAdmin;

	PlayerID = getPlayer();
	PlayerName = getName(PlayerID);
	PlayerMapID = getMap(PlayerID);
	PlayerDir = getDir(PlayerID);
	PlayerX = getX(PlayerID);
	PlayerY = getY(PlayerID);
	GlobalVarName = "Door";
	GlobalVarName += itos(PlayerID);
	IsAdmin = (getAccess(PlayerID) != 1);

	// Test whether we just stepped on a DOOR_TYPE_WARP_AUTO
	DoorMapID = PlayerMapID;
	DoorX = PlayerX;
	DoorY = PlayerY;
	if (getTileType(DoorMapID, DoorX, DoorY) == TILE_TYPE_SCRIPT)
		{
		// Search door list for coordinates
		for (DoorIndex = 0; DoorIndex < NUM_DOORS; DoorIndex++)
			{
			pDoor = &(gDoors[DoorIndex]);
			if (pDoor->MapID == DoorMapID && pDoor->X == DoorX &&
				pDoor->Y == DoorY)
				break;
			}

		// Exit if no door was found
		if (DoorIndex >= NUM_DOORS)
			return;

		if (pDoor->DoorType == DOOR_TYPE_WARP_AUTO)
			setPos(PlayerID, pDoor->WarpMapID, pDoor->WarpX, pDoor->WarpY);
		}

	// Check if door should be automatically closed
	if (isGlobal(GlobalVarName))
		{
		DoorIndex = globalInt(GlobalVarName);
		pDoor = &(gDoors[DoorIndex]);
		freeGlobal(GlobalVarName);

		DoorMapID = pDoor->MapID;
		DoorX = pDoor->X;
		DoorY = pDoor->Y;
		}
	else
		{
		// Get coordinates for door the player is facing
		DoorMapID = PlayerMapID;
		DoorX = PlayerX;
		DoorY = PlayerY;
		switch (PlayerDir)
			{
			case DIR_DOWN:
				DoorY++;
				break;
			case DIR_UP:
				DoorY--;
				break;
			case DIR_LEFT:
				DoorX--;
				break;
			case DIR_RIGHT:
				DoorX++;
				break;
			}

		// Search door list for coordinates
		for (DoorIndex = 0; DoorIndex < NUM_DOORS; DoorIndex++)
			{
			pDoor = &(gDoors[DoorIndex]);

			if (pDoor->MapID == DoorMapID && pDoor->X == DoorX &&
				pDoor->Y == DoorY && (PlayerName == pDoor->pPlayerName || IsAdmin))
				break;
			}

		// Exit if no door was found
		if (DoorIndex >= NUM_DOORS)
			return;
		}

	// Test whether door is closed
	if (getTileType(DoorMapID, DoorX, DoorY) == TILE_TYPE_SWITCH)
		{
		// Open door
		switch (pDoor->DoorType)
			{
			case DOOR_TYPE_DELAYED:

				setTile(DoorMapID, DoorX, DoorY, pDoor->Layer, pDoor->TileOpen);

				setTileType(DoorMapID, DoorX, DoorY, TILE_TYPE_NONE);

				// Set door to close automatically after delay
				setGlobalInt(GlobalVarName, DoorIndex);
				runScript(myScript(), pDoor->Delay);

				updateMap(DoorMapID);

				break;

			case DOOR_TYPE_WARP_DELAYED:

				setTile(DoorMapID, DoorX, DoorY, pDoor->Layer, pDoor->TileOpen);

				setTileType(DoorMapID, DoorX, DoorY, TILE_TYPE_WARP);
				setTileWarp(DoorMapID, DoorX, DoorY, pDoor->WarpMapID, pDoor->WarpX, pDoor->WarpY);

				// Set door to close automatically after delay
				setGlobalInt(GlobalVarName, DoorIndex);
				runScript(myScript(), pDoor->Delay);

				updateMap(DoorMapID);

				break;

			case DOOR_TYPE_AUTO:

				setTile(DoorMapID, DoorX, DoorY, pDoor->Layer, pDoor->TileOpen);

				setTileType(DoorMapID, DoorX, DoorY, TILE_TYPE_SCRIPT);
				setTileScript(DoorMapID, DoorX, DoorY, myScript());

				// Set door to close automatically after delay
				setGlobalInt(GlobalVarName, DoorIndex);
				runScript(myScript(), pDoor->Delay);

				updateMap(DoorMapID);

				break;

			case DOOR_TYPE_WARP_AUTO:
			
				setTile(DoorMapID, DoorX, DoorY, pDoor->Layer, pDoor->TileOpen);

				setTileType(DoorMapID, DoorX, DoorY, TILE_TYPE_SCRIPT);
				setTileScript(DoorMapID, DoorX, DoorY, myScript());

				// Set door to close automatically after delay
				setGlobalInt(GlobalVarName, DoorIndex);
				runScript(myScript(), pDoor->Delay);

				updateMap(DoorMapID);

				break;

			case DOOR_TYPE_SECURE:

				setPos(PlayerID, DoorMapID, DoorX, DoorY);

				break;

			case DOOR_TYPE_WARP_SECURE:

				setPos(PlayerID, pDoor->WarpMapID, pDoor->WarpX, pDoor->WarpY);

				break;
			}
		}
	else
		{
		// Close door
		switch (pDoor->DoorType)
			{
			case DOOR_TYPE_DELAYED:
			case DOOR_TYPE_WARP_DELAYED:
			case DOOR_TYPE_AUTO:
			case DOOR_TYPE_WARP_AUTO:

				setTile(DoorMapID, DoorX, DoorY, pDoor->Layer, pDoor->TileClosed);
				setTileType(DoorMapID, DoorX, DoorY, TILE_TYPE_SWITCH);
				setTileScript(DoorMapID, DoorX, DoorY, myScript());

				updateMap(DoorMapID);

				break;
			}
		}
}
