#include "dir.h"

void recurseMap(long mapid, short x, short y, short dist, short path_map[15][20])
{
   cMap *map = mapStruct(mapid);
   dist++;
   if(inBounds(x,y) && map->map[y][x].type == TILE_TYPE_NONE || map->map[y][x].type == TILE_TYPE_SCRIPT)
   {
      if(path_map[y][x] > dist || path_map[y][x] == -1)
      {
         path_map[y][x] = dist;
         recurseMap(mapid, x + 1, y, dist, path_map);
         recurseMap(mapid, x - 1, y, dist, path_map);
         recurseMap(mapid, x, y + 1, dist, path_map);
         recurseMap(mapid, x, y - 1, dist, path_map);
      }
   }
}

int main()
{
   int id=getPlayer();
   cPlayer *player = playerStruct(id);
   cPlayer *target;
   short short_dist = -1;
   short short_dir  = -1;
   cMap *map = mapStruct(player->id);
   short path_map[15][20];
   
   for(short x = 0; x < 20; x++)
   {
      for(short y = 0; y < 15; y++)
      {
         path_map[y][x] = -1;
      }
   }
   
   if(player->target != -1)
   {
      target = playerStruct(player->target);
      if(target->map == player->map)
      {
         recurseMap(target->map, target->x, target->y, 0, path_map);
         for(int i = 0; i < 4; i++)
         {
            short x = player->x;
            short y = player->y;
            dirapply((int&)x,(int&)y,i);
            if(inBounds(x,y) && path_map[y][x] != -1 && (short_dist == -1 || path_map[y][x] < short_dist))
            {
               short_dist = path_map[y][x];
               short_dir  = i;
            }
         }
         if(short_dir != -1)
         {
            if(short_dist == 2)
            {
               npc_move(id, short_dir);
               npc_attack(id,player->target);
            }
            else if(short_dist == 1)
            {
               npc_attack(id,player->target);
            }
            else
            {
               npc_move(id,short_dir);
            }
         }
      }
      else
      {
         player->target = -1;
      }
   }
   else
   {
      player->target = npc_find_player(id);
   }
}