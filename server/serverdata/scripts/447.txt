/*
	Trash receptacle script -- Also, afk land item transfer prevention.
	Written by Steve Northamer
	SteveNorthamer@yahoo.com
	April 9, 2004
*/

struct TRASH_TILE
{
	int MapID;
	int x;
	int y;
};

TRASH_TILE gpTrashTiles[] = {

	{ 440, 10, 6 },
	{ 829, 10, 12 },
	{ 1146, 1, 7 },
	{ 1229, 18, 12 },
	{ 1001, 1, 2 },
	{ 747, 6, 2, }, 
	{ 244, 7, 10, }, 
	{ 1281, 15, 2, },
	{ 714, 7, 4, }, 
	{ 1092, 17, 5 }, 
	{ 1000, 14, 2, },
	{ 1082, 17, 10, },
	{ 1322, 3, 8, },
	{ 132, 18, 12, },
	{ 477, 14, 1, },	
	{ 1165, 17,12, },
	{ 449, 10, 2, },
	{ 550, 15, 3, },
	{ 550, 4, 3, },
	{ 1375, 1, 10 },
	{ 0, 1, 4 },
	{ 1387, 9, 5 },
	{ 1387, 1, 2 },
	{ 1387, 10, 5 }

	};

const int NUM_TRASH_TILES = sizeof(gpTrashTiles) / sizeof(TRASH_TILE);

int main()
{
	int ItemID;
	int TrashID;
	int NumItems;
	cItem* pItem;
	TRASH_TILE* pTrash;


	NumItems = itemLen();
	for (ItemID = 0; ItemID < itemLen(); ItemID++)
		{
		pItem = itemStruct(ItemID);
		if(pItem->map != 1387 || pItem->item_template == 1) // wishing well check
		{
		for (TrashID = 0; TrashID < NUM_TRASH_TILES; TrashID++)
			{
			pTrash = &(gpTrashTiles[TrashID]);
			if (pItem->owner == -1 && pItem->map == pTrash->MapID && pItem->x == pTrash->x && pItem->y == pTrash->y)
				{
				strcpy(pItem->name, "_EMPTY_");
				pItem->life = 0;
				pItem->qty = 0;
				itemSave(ItemID);
				sendRemoveMapItem(pTrash->MapID, pTrash->x, pTrash->y);
				}
			}
		}
		}
	//runScript(447,500);
}
