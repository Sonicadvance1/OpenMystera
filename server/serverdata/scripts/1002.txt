//login script

struct IP_ADDRESS_BAN
{
	char IPAddress[16];
	char SubnetMask[16];
};

IP_ADDRESS_BAN gpBannedIPs[] = {
	//{ "65.119.225.205", "255.255.255.255" },	// Forever. Reason:death threats.
	{ "24.158.4.114", "255.255.255.255" }	// Ron/Blade/joker
	};

const int NUM_BANNED_IPS = sizeof(gpBannedIPs) / sizeof(gpBannedIPs[0]);

unsigned int ParseIPAddress(char* xpIPAddress)
{
	unsigned int IP4;
	unsigned int IP3;
	unsigned int IP2;
	unsigned int IP1;
	sscanf(xpIPAddress, "%d.%d.%d.%d", &IP4, &IP3, &IP2, &IP1);
	return (IP4 << 24) | (IP3 << 16) | (IP2 << 8) | IP1;
}

void main()
{
	// Check IP Ban list - added by Steve
	int i;
	int PlayerID;
	unsigned int PlayerIP;
	unsigned int BannedIP;
	unsigned int SubnetMask;
	cPlayer* pPlayer;
	PlayerID = getPlayer();
	pPlayer = playerStruct(PlayerID);
	sendChatf(PlayerID,"^G/retrain has been temporarily added so you can retrain your stat points.");
	sendChatf(PlayerID,"^GAddtional dex now makes you attack faster. Dual wielding makes you attack slower.");
	sendChatf(PlayerID,"^GTo attack any faster than you do now, you'll need to download the new client.");
	sendChatf(PlayerID,"^Gfrom mysteralegends.com");

	PlayerIP = ParseIPAddress(pPlayer->ip);
	for (i = 0; i < NUM_BANNED_IPS; i++)
		{
		BannedIP = ParseIPAddress(gpBannedIPs[i].IPAddress);
		SubnetMask = ParseIPAddress(gpBannedIPs[i].SubnetMask);
		if ((PlayerIP & SubnetMask) == (BannedIP & SubnetMask))
			{
			// Disconnect
			runScript(452, 1000);
			return;
			}
		}      
	if(pPlayer->map == 820 && pPlayer->x == 8 && pPlayer->y == 7)
	{
		sendChat("^YPress spacebar to read signs. Make sure you read every single one! Type in ^G/info ^Yat any time to see a list of commands.",PlayerID);
	}
}


/*
	Reassociate player inventory
	Written by Steve Northamer
	SteveNorthamer@yahoo.com
	April 15, 2004
*/

/*void main()
{
	int PlayerID;
	int ItemID;
	int SlotID;
	int ItemLen;
	int InvLen;
	cPlayer* pPlayer;
	cItem* pItem;

	PlayerID = getPlayer();
	pPlayer = playerStruct(PlayerID);

	// Disassociate inventory from player
	InvLen = inventoryLen();
	for (SlotID = 0; SlotID < InvLen; SlotID++)
		{
		pPlayer->inventory[SlotID] = -1;
		}

	// Reassociate inventory with player
	ItemLen = itemLen();
	for (ItemID = 0; ItemID < ItemLen; ItemID++)
		{
		pItem = itemStruct(ItemID);

		if (pItem->qty == 0)
			continue;

		if (pItem->owner != PlayerID)
			continue;

		pPlayer->inventory[pItem->slot] = ItemID;
		}
	playerSave(PlayerID);

	// Update client
	for (SlotID= 0; SlotID < InvLen; SlotID++)
		{
		ItemID = pPlayer->inventory[SlotID];
		if (ItemID != -1)
			{
			pItem = itemStruct(ItemID);
			sendInventoryAdd(PlayerID, pItem->graphic, pItem->name, SlotID, pItem->qty);
			sendInventoryQty(PlayerID, SlotID, pItem->qty);
			}
		else
			{
			sendInventoryQty(PlayerID, SlotID, 0);
			}
		}
}*/




/*#include <stdio.h>
#include <string.h>

void main()
{
	// Get player information
	int PlayerID;
	cPlayer* pPlayer;
	PlayerID = getPlayer();
	pPlayer = playerStruct(PlayerID);


	//if (strcmp(pPlayer->name, "Robin") != 0 && strcmp(pPlayer->name, "Sonicadvancell") != 0)
	//if (strcmp(pPlayer->name, "Robin") != 0)
		return;


	// Open player's inventory file
	FILE* pInvFile;
	char pFileName[128];
	sprintf(pFileName, "Inv_%s.dat", pPlayer->name);
	pInvFile = fopen(pFileName, "r");


	// If this file doesn't exist, don't modify player's inventory
	if (pInvFile == NULL)
		return;


	// Load items into ML from file
	int i;
	int InvLen;
	int ItemIDOffset;
	int ItemID;
	int DatabaseID;
	cItem* pItem;
	InvLen = inventoryLen();
	ItemIDOffset = itemLen();
	itemResize(ItemIDOffset + InvLen);
	for (i = 0; i < InvLen; i++)
		{
		// Read item from file (without overwriting database ID)
		ItemID = i + ItemIDOffset;
		pItem = itemStruct(ItemID);
		DatabaseID = pItem->id;
		fread((void*)pItem, sizeof(cItem), 1, pInvFile);
		pItem->id = DatabaseID;

		// Check whether item is valid
		if (pItem->qty == 0 || strcmp(pItem->name, "_EMPTY_") == 0)
			{
			strcpy(pItem->name, "_EMPTY_");
			pItem->life = 0;
			pItem->qty = 0;
			pItem->owner = -1;
			pPlayer->inventory[i] = -1;
			itemSave(ItemID);
			continue;
			}

		// Associate item with player
		pItem->owner = PlayerID;
		pItem->slot = i;
		pPlayer->inventory[i] = ItemID;
		itemSave(ItemID);

		// Send inventory to client
		sendInventoryAdd(PlayerID, pItem->graphic, pItem->name, i, pItem->qty);
		}
	playerSave(PlayerID);


	// Close file
	fclose(pInvFile);
}*/
