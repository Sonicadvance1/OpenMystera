/*
	Secure Area script
	Written by Steve Northamer
	SteveNorthamer@yahoo.com
	April 25, 2004
*/

struct SECURE_AREA
{
	int MapID;
	int x1;
	int y1;
	int x2;
	int y2;
	char* pPlayerName;
};

SECURE_AREA gpSecureArea[] = {
	{ 540, 0, 0, 19, 14, "GoodSteve" },
	{ 1064, 6, 1, 14, 7, "Robin" },
	{ 1066, 0, 0, 19, 10, "Fie" }
	};

const int NUM_SECURE_AREAS = sizeof(gpSecureArea) / sizeof(gpSecureArea[0]);

void main()
{
	// Search through secure area list:
	// If player is not within an area, do nothing
	// If player is within an area and has access, do nothing
	// If player is within an area and does not have access, kill them

	int PlayerID;
	cPlayer* pPlayer;
	int i;
	SECURE_AREA* pArea;
	bool Kill;

	PlayerID = getPlayer();
	pPlayer = playerStruct(PlayerID);

	if (pPlayer->access > 1)	// Ignore admins
		return;

	Kill = false;
	for (i = 0; i < NUM_SECURE_AREAS; i++)
		{
		pArea = &(gpSecureArea[i]);
		if (pPlayer->map == pArea->MapID &&
			pPlayer->x >= pArea->x1 && pPlayer->x <= pArea->x2 &&
			pPlayer->y >= pArea->y1 && pPlayer->y <= pArea->y2)
			{
			if (strcmp(pPlayer->name, pArea->pPlayerName) == 0)
				return;	// Player is allowed in this area, do nothing
			else
				Kill = true;	// Player is not allowed in this area so far, set kill flag
			}
		}

	if (Kill)
		{
		pPlayer->target = PlayerID;
		pPlayer->hp = 0;
		playerSave(PlayerID);
		sendHP(PlayerID);
		sendChatf(-1, "^R%s has tripped the Anti-Haxor v2.0 device!", pPlayer->name);
		}
}
